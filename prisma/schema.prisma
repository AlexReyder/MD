generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  DECLINE
  VERIFICATION
  ACCEPT
  PAID
  COLLECT
  SENT
  DELIVERED
}

enum PaymentType {
  TRANSFER
  DEFFERED
}

enum DeliveryType {
  CDEK
  MAILRUSSIA
  YANDEX
  FIVEPOST
}

enum BonusType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  surname         String?
  phone           String           @unique
  password        String
  role            Role             @default(USER)
  emailVerified   Boolean          @default(false) @map("email_verified")
  emailToken      String           @default(uuid()) @map("email_token")
  recoveryToken   String           @default(uuid()) @map("recovery_token")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  firstBuy        Boolean          @default(true) @map("first_buy")
  purchasesAmount Int              @default(0) @map("purchases_amount")
  whatsapp        Boolean          @default(false)
  telegram        Boolean          @default(false)
  Cart            Cart[]
  Order           Order[]
  Bonus           Bonus[]
  NotifyProducts  NotifyProducts[]
}

model Bonus {
  id        String    @id @default(uuid())
  amount    Int       @default(0)
  status    BonusType @default(BRONZE)
  history   Json[]    @default([])
  User      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  isCustom  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String       @id @default(uuid())
  User        User         @relation(fields: [userId], references: [id])
  userId      String
  payment     PaymentType
  delivery    DeliveryType
  products    Json
  details     Json
  amount      Int
  trackNumber String?
  status      OrderStatus  @default(VERIFICATION)
  Promocode   Promocode?   @relation(fields: [promocodeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  promocodeId String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Promocode {
  id        String   @id @default(uuid())
  value     String   @unique
  expiresAt DateTime
  discount  Int
  Order     Order[]
  Users     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String         @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   ShoppingCard[]
}

model Band {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manufacturer {
  id             String        @id @default(uuid())
  name           String
  slug           String
  material       Material?     @relation(fields: [materialId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  materialId     String?
  print          Print?        @relation(fields: [printId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  printId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ShoppingCard   ShoppingCard? @relation(fields: [shoppingCardId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  shoppingCardId String?
}

model Sizes {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Colors {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Material {
  id           String         @id @default(uuid())
  name         String
  slug         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Manufacturer Manufacturer[]
}

model Print {
  id           String         @id @default(uuid())
  name         String
  slug         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Manufacturer Manufacturer[]
}

model Country {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingCard {
  id                 String         @id @default(uuid())
  name               String
  slug               String
  isActive           Boolean        @default(true) @map("is_active")
  isNew              Boolean        @default(false) @map("is_new")
  isBestseller       Boolean        @default(false) @map("is_bestseller")
  isInStock          Boolean        @map("is_in_stock")
  articleNumber      String         @unique @map("article_number")
  description        String?
  adPrice            Int
  price              Int
  images             Json
  details            Json
  category           Json[]
  categoryFilter     String[]
  band               Json[]
  bandFilter         String[]
  genre              Json[]
  genreFilter        String[]
  colors             Json[]
  colorsFilter       String[]
  sizes              Json[]
  sizesFilter        String[]
  manufacturer       Json[]
  manufacturerFilter String[]
  material           Json[]
  materialFilter     String[]
  print              Json[]
  printFilter        String[]
  country            Json[]
  countryFilter      String[]
  CategoryTable      Category[]
  ManufacturerTable  Manufacturer[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("shopping_card")
}

model NotifyProducts {
  id            String   @id @default(uuid())
  User          User     @relation(fields: [userId], references: [id])
  userId        String
  isNotified    Boolean  @default(false)
  productId     String
  name          String
  articleNumber String   @map("article_number")
  color         String
  size          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("notify_products")
}

model Cart {
  id        String      @id @default(uuid())
  status    OrderStatus @default(VERIFICATION)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  products  Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(uuid())
  alt       String
  url       String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  html      String
  json      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("delivery_info")
}

model ReturnInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  html      String
  json      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("return_info")
}

model AboutInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  html      String
  json      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about_info")
}

model AdLineInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  html      String
  json      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ad_line_info")
}
